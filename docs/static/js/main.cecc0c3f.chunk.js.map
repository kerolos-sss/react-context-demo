{"version":3,"sources":["contexts/createDataContext.js","services/index.js","actions/authActions.js","reducers/authReducer.js","contexts/AuthContext.js","screens/LoginScreen.js","components/PostList.js","reducers/postsReducer.js","actions/postsActions.js","contexts/PostsContext.js","screens/PostsScreen.js","components/PostForm.js","screens/EditPostScreen.js","components/PostDetail.js","screens/PostDetailScreen.js","screens/AddPostScreen.js","App.js","serviceWorker.js","reducers/index.js","sagas/index.js","index.js"],"names":["createDataContext","reducer","actions","initialValue","Context","createContext","Provider","children","useReducer","state","dispatch","boundActions","key","value","logIn","user","pass","a","Promise","resolve","reject","setTimeout","setToken","userId","userToken","Error","token","DataContainer","data","id","title","body","getAllPosts","num","Math","random","addPost","post","ids","map","console","log","newId","max","push","editPost","original","find","p","deletePost","findIndex","filter","message","sagaTheLogin","type","payload","getLoginErrorAction","setUsername","setPassword","login","username","password","services","authReducer","action","error","creds","withAuth","connect","authState","auth","LoginScreen","arguments","Input","onClick","Label","onChange","e","target","style","color","PostList","posts","ListGroup","item","ListGroupItem","heading","detail","substring","delete","edit","view","postsReducer","successMessage","postIndex","fetchAll","withPosts","postsState","PostsScreen","history","useHistory","useEffect","PostForm","doneHandler","success","useState","headingState","setHeadingState","detailState","setDetailState","EditPostScreen","withRouter","location","then","goBack","catch","PostDetail","PostDetailScreen","AddPostScreen","Home","About","className","CardHeader","path","to","exact","component","Boolean","window","hostname","match","combinedReducers","combineReducers","sagaDemoLogin","displayMessageWithCall","displayMessageWithPutAction","rootSaga","myDelay","ms","res","getAuthState","select","put","call","delayMs","msg","func","i","length","substr","takeLatest","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","loggerMiddleware","ReactDOM","render","StrictMode","document","getElementById","run","mySaga","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cecc0c3f.chunk.js","sourcesContent":["import React, {  createContext, useCallback, useEffect, useReducer, useState } from 'react'\nimport { useDispatch } from 'react-redux';\n\nexport const createDataContext = (reducer, actions, initialValue) => {\n    const Context = createContext(initialValue);\n    \n    const Provider = ({children}) => {\n        const [state, dispatch] = useReducer(reducer);\n\n        const boundActions = {};\n        for(const key in actions){\n            boundActions[key] = actions[key](dispatch);\n        }\n        \n        // this value is received by the useContext react hook\n        return <Context.Provider value={{state, ...boundActions}}>\n            {children}\n        </Context.Provider>\n    }\n\n    return {Context, Provider}   \n}","\n/**\n * \n * @param {string} user \n * @param {string} pass \n */\n\n\n\nexport const logIn = async (user, pass) => {\n    return new Promise((resolve, reject) => {\n        if (user == pass) {\n            setTimeout(() => {\n                let token = \"TOKEN\";\n                setToken(token)\n                resolve({\n                    userId: user,\n                    userToken: token \n                });\n            }, 1000);\n        } else {\n            setTimeout(() => {\n                reject(new Error(\"Authentication failed\"));\n            }, 3000);\n        }\n    });\n}\n\nexport const signUp = (user, pass) => {\n    return new Promise((resolve, reject) => {\n        if (user == pass) {\n            setTimeout(() => resolve({ message: \"success\" }), 1000);\n        } else {\n            setTimeout(() => {\n                reject(new Error(\"SignUp error\"));\n            }, 3000);\n        }\n    });\n}\n\nexport const setToken = (token) => {\n    DataContainer.token = token;\n}\n\nexport const getToken = () => {\n    return DataContainer.token;\n}\nexport class DataContainer {\n    static token = null;\n    static data = [\n        {\n            id: 1,\n            title: \"First Post\",\n            body: \"First post body\"\n        },\n        {\n            id: 2,\n            title: \"Second Post\",\n            body: \"Second post body\"\n        },\n        {\n            id: 3,\n            title: \"Third Post\",\n            body: \"Third post body\"\n        },\n        {\n            id: 4,\n            title: \"Fourth Post\",\n            body: \"Fourth post body\"\n        },\n        {\n            id: 5,\n            title: \"Fifth Post\",\n            body: \"Fifth post body\"\n        },\n        {\n            id: 6,\n            title: \"Sixth Post\",\n            body: \"Sixth post body\"\n        },\n        {\n            id: 7,\n            title: \"Seventh Post\",\n            body: \"Seventh post body\"\n        },\n    ];\n}\n\nexport const getAllPosts = () => {\n    // I want a fair chance of failure \n    let num = Math.random()\n    return new Promise((resolve, reject) => {\n        if (num >= 0.25) {\n            setTimeout(() => resolve([...DataContainer.data]), 1000);\n        } else {\n            setTimeout(() => {\n                reject(new Error(\"Data error\"));\n            }, 3000);\n        }\n    });\n}\n\nexport const addPost = (post) => {\n    // I want a fair chance of failure \n    let num = Math.random()\n    return new Promise((resolve, reject) => {\n        if (num >= 0.25) {\n\n            setTimeout(() => {\n                let ids = DataContainer.data.map(post => post.id);\n                console.log(\"IDS\", ids)\n\n                let newId = Math.max(...[0, ...ids]) + 1;\n                post.id = newId;\n                DataContainer.data.push({ ...post });\n                resolve(post);\n            }, 1000);\n\n        } else {\n            setTimeout(() => {\n                reject(new Error(\"Data error\"));\n            }, 3000);\n        }\n    });\n}\n\nexport const editPost = (id, post) => {\n    // I want a fair chance of failure \n    console.log(\"editPost\");\n    console.log(id, post)\n    let num = Math.random()\n    return new Promise((resolve, reject) => {\n        if (num >= 0.25) {\n\n            setTimeout(() => {\n\n                let original = DataContainer.data.find(post => post.id == id);\n                if (!original) {\n                    reject(new Error(\"Resource Not Found\"));\n                    return;\n                }\n                DataContainer.data = DataContainer.data.map(p => p == original ? { ...post, id: id } : p );\n                \n                original = { ...post, id: id }\n                resolve({ ...original });\n            }, 1000);\n\n        } else {\n            setTimeout(() => {\n                reject(new Error(\"Data error\"));\n            }, 3000);\n        }\n    });\n}\n\nexport const deletePost = (id) => {\n    // I want a fair chance of failure \n    let num = Math.random()\n    return new Promise((resolve, reject) => {\n        if (num >= 0.25) {\n\n            setTimeout(() => {\n\n                let originalIndex = DataContainer.data.findIndex(post => post.id == id);\n                if (originalIndex == -1) {\n                    reject(new Error(\"Resource Not Found\"));\n                    return;\n                }\n                DataContainer.data = DataContainer.data.filter(post => post.id != id);\n                resolve({ message: \"Deleted\" });\n            }, 1000);\n\n        } else {\n            setTimeout(() => {\n                reject(new Error(\"Data error\"));\n            }, 3000);\n        }\n    });\n}\n\n\n\n// export default { logIn, signUp }\n","import * as services from './../services'\n\n\nexport const sagaTheLogin = dispatch =>  async () => {\n\n    dispatch(\n        {type: \"SAGA_DEMO_LOGIN\", payload: {getLoginErrorAction, \n        setUsername: setUsername(dispatch), \n        setPassword: setPassword(dispatch),\n        login:login(dispatch)}\n  })\n}\n\n\nexport const login = dispatch =>  async (username, password) => {\n    try {\n        let user = await services.logIn(username, password);\n        dispatch({type: \"login_success\", payload: user})\n    } catch (e){\n        dispatch(getLoginErrorAction(e.message))\n    }\n}\n\nexport const setUsername = dispatch => (username) => {\n    dispatch({type: \"login_set_username\", payload: username})\n}\n\nexport const setPassword = dispatch => (password) => {\n    dispatch({type: \"login_set_password\", payload: password})\n}\nexport const getLoginErrorAction = (message) => {\n    return { type: \"login_error\", payload: message };\n}\n\n","\nexport const authReducer = (state = {}, action) => {\n\n    switch(action.type){\n\n        case \"login_success\":\n            return {...state, error: null, creds: action.payload};\n        case \"login_error\":\n            return {...state, error: action.payload, creds: null};\n        case \"login_set_username\":\n            return {...state, error: null, username: action.payload};\n        case \"login_set_password\":\n            return {...state, error: null, password: action.payload};          \n        default:\n            return state; \n    }\n}\n","import { createDataContext } from './createDataContext'\nimport { sagaTheLogin, login, setPassword, setUsername } from '../actions/authActions'\n// import { login, setPassword, setUsername } from '../actions/authActionsThunk'\nimport { authReducer } from '../reducers/authReducer';\nimport { connect } from 'react-redux';\n\nexport const { Context: AuthContext, Provider: AuthProvider } = createDataContext(\n    authReducer, {\n    login,\n    setPassword,\n    setUsername,\n}, {});\n\n\n\nconst mapStateToProps = state => {\n    return {\n        // since the state is named after the reducer in the combined reducers ../reducers/index.js\n        authState: state.auth\n    }\n}\nconst mapDispatchToProps = dispatch => {\n    const actions = {\n        login,\n        setPassword,\n        setUsername,\n        sagaTheLogin\n        \n    }\n    const boundActions = {};\n    for (const key in actions) {\n        boundActions[key] = actions[key](dispatch);\n    }\n    return boundActions\n}\n\n// const mapDispatchToProps = dispatch => {\n//     const boundActions = {\n//         // TODO: explain, whenever we dispatch a function\n//         // TODO: Thunk would pass dispatch and state to it \n\n//         login: (...params) => dispatch(login(...params)),\n//         setPassword: (...params) => dispatch(setPassword(...params)),\n//         setUsername: (...params) => dispatch(setUsername(...params)),\n//     }\n//     return boundActions\n// }\n\nexport const withAuth = connect(mapStateToProps, mapDispatchToProps);","import React, { useContext } from 'react'\nimport { Input, Label } from 'reactstrap'\nimport { AuthContext, withAuth } from '../contexts/AuthContext'\nconst _LoginScreen = function ({authState, login, setUsername, setPassword, sagaTheLogin}) {\n\n    console.log(arguments);\n    // const {state: authState, login, setUsername, setPassword} = useContext(AuthContext)\n    console.log(authState);\n\n    return (<>\n        <Input value=\"SAGA AWAY THE LOGIN\" type=\"button\" onClick={() => sagaTheLogin()}/>\n        <br/>\n        <br/>\n        <Label>Username</Label>\n        <br/>\n        <Input value={authState?.username || \"\"} type=\"text\" onChange={ e => setUsername(e.target.value)} />\n        <br/>\n        <Label>Password</Label>\n        <br/>\n        <Input value={authState?.password || \"\"} type=\"password\" onChange={e => setPassword(e.target.value)}/>\n        <br/>\n        <Input value=\"login\" type=\"button\" onClick={() => login(authState.username, authState.password)}/>\n        { authState?.error &&  <> <br/> <Label style={{color: \"red\"}}>{authState.error}</Label> </>}\n    </>)\n\n}\n\nexport const LoginScreen = withAuth(_LoginScreen);","import React from 'react'\nimport { Input, ListGroup, ListGroupItem } from 'reactstrap'\n\n/**\n * @typedef {Object} PostItem\n * @property {number} key\n * @property {string} heading\n * @property {string} detail\n * \n * @typedef {Object} PostActions\n * @property {(number) => any } delete\n * @property {(number) => any } edit\n * @property {(number) => any } view\n * \n * @typedef {Object} PostListProps\n * @property {PostItem[]} posts \n * @property {PostActions} actions\n * \n * @param {PostListProps} props\n * \n */\nexport const PostList = ({posts, actions}) => {\n\n    console.log(\"PostList\");\n    \n    return <div>\n        <ListGroup>\n            {\n                posts.map(item => {\n                    return <ListGroupItem key={item.key}>\n                        <h4>{item.heading}</h4>\n                        <h4>{item.detail.substring(0, 15) + \"...\"}</h4>\n                        <Input type=\"button\" value=\"DELETE\"  onClick={ () => actions.delete(item.key)} />\n                        <Input type=\"button\" value=\"Edit\" onClick={ () => actions.edit(item.key, item)} />\n                        <Input type=\"button\" value=\"View\" onClick={ () => actions.view(item.key, item)} />\n                        \n                        </ListGroupItem>\n                })                \n            }\n        </ListGroup>\n    </div>\n}","\n/**\n * \n * @param {*} state \n * @param {*} action \n * @returns {{error: null | undefined | string, \n    *  posts: {id: number, title: string, body: string, successMessage: string | null | undefined}[] }}\n    */\n   export const postsReducer = (state = {}, action) => {\n       console.log(\"PostsReducer\")\n       console.log(state)\n       console.log(action)\n       \n       // if (state == null){\n       //     state = {}\n       // }\n       switch (action.type) {\n           case \"fetch_posts_success\":\n               return { ...state, successMessage: action.payload.successMessage, error: null, posts: action.payload.posts };\n           case \"fetch_posts_error\":\n               return { ...state, successMessage: null, error: action.payload, posts: null };\n   \n           case \"delete_post_success\":\n               state.posts = state.posts.filter(item => item.id != action.payload.id);\n               return { ...state, successMessage: action.payload.successMessage, error: null, posts: [...state.posts] };\n           case \"delete_post_error\":\n               return { ...state, successMessage: null, error: action.payload }\n   \n           case \"edit_post_success\": {\n               let postIndex = state.posts.findIndex(item => item.id = action.payload.id);\n               const original = state.posts[postIndex];\n               const post = { ...original, ...action.payload.data, id: original.id }\n               state.posts[postIndex] = post;\n               return { ...state, successMessage: action.payload.successMessage, error: null, posts: state.posts };\n           }\n           case \"edit_post_error\":\n               return { ...state, successMessage: null, error: action.payload }\n   \n           case \"add_post_success\":\n               const post = { ...action.payload.data, id: action.payload.id }\n               state.posts.push(post);\n               return { ...state, successMessage: action.payload.successMessage, error: null, posts: state.posts };\n           case \"add_post_error\":\n               return { ...state, successMessage: null, error: action.payload }\n   \n           default:\n               return state;\n       }\n   }\n   ","import * as services from './../services'\n\n\nexport const fetchAll = dispatch => async () => {\n    try {\n        let posts = await services.getAllPosts();\n        dispatch({ type: \"fetch_posts_success\", payload: { posts, successMessage: \"posts loaded\" } })\n    } catch (e) {\n        dispatch({ type: \"fetch_posts_error\", payload: e.message })\n    }\n}\n\nexport const deletePost = dispatch => async (id) => {\n    try {\n        await services.deletePost(id);\n        dispatch({ type: \"delete_post_success\", payload: { id: id, successMessage: \"Deleted successfully\" } })\n    } catch (e) {\n        dispatch({ type: \"delete_post_error\", payload: e.message })\n    }\n}\n\nexport const editPost = dispatch => async (id, data) => {\n    try {\n        let post = await services.editPost(id, data);\n        dispatch({ type: \"edit_post_success\", payload: { id: id, data: data, successMessage: \"Edited successfully\" } })\n        return true;\n    } catch (e) {\n        dispatch({ type: \"edit_post_error\", payload: e.message })\n        throw e;\n    }\n}\n\nexport const addPost = dispatch => async (data) => {\n    try {\n        let post = await services.addPost(data);\n        let id = post.id;\n        dispatch({ type: \"add_post_success\", payload: { id: id, data: data, successMessage: \"Added successfully\" } })\n        return true;\n    } catch (e) {\n        dispatch({ type: \"add_post_error\", payload: e.message })\n        throw e\n    }\n}\n","import { createDataContext } from './createDataContext'\nimport { postsReducer } from '../reducers/postsReducer';\nimport { fetchAll, addPost, editPost, deletePost } from '../actions/postsActions'\n// import { fetchAll, addPost, editPost, deletePost } from '../actions/postsActionsThunk'\n\nimport { connect } from 'react-redux';\n\nexport const { Context: PostsContext, Provider: PostsProvider } = createDataContext(\n    postsReducer,\n    {\n        fetchAll,\n        addPost,\n        editPost,\n        deletePost\n    });\n\n\n\nconst mapStateToProps = state => {\n    return {\n        // since the state is named after the reducer in the combined reducers ../reducers/index.js\n        postsState: state.posts\n    }\n}\n// Those are actions with injected dispatch\nconst mapDispatchToProps = dispatch => {\n    const actions =  {\n        fetchAll,\n        addPost,\n        editPost,\n        deletePost\n    }\n    const boundActions = {};\n    for(const key in actions){\n        boundActions[key] = actions[key](dispatch);\n    }\n    return boundActions\n}\n\n// Those are actions with injected dispatch\n// const mapDispatchToProps = dispatch => {\n//     const actions =  {\n//         fetchAll,\n//         addPost,\n//         editPost,\n//         deletePost\n//     }\n//     const boundActions = {};\n//     for(const key in actions){\n//         boundActions[key] = (...params) => dispatch(actions[key](...params))\n//     }\n//     console.log(\"POST CONTEXT\")\n//     console.log(\"BOUND ACTIONS\", boundActions)\n    \n//     return boundActions\n// }\n\n\nexport const withPosts = connect(mapStateToProps, mapDispatchToProps);","import React, { useContext, useEffect } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { Input } from 'reactstrap'\nimport { PostList } from '../components/PostList'\nimport { PostsContext, withPosts } from '../contexts/PostsContext'\n\nlet postsSample = [\n    {\n        id: 6,\n        title: \"First Post\",\n        body: \"First post body\"\n    },\n    {\n        id: 7,\n        title: \"First Post\",\n        body: \"First post body\"\n    },\n]\n\nconst _PostsScreen = ({postsState, fetchAll, deletePost}) => {\n\n    // const { state: postsState, fetchAll, deletePost } = useContext(PostsContext)\n    \n    const history = useHistory();\n    const navigateToAddPost = () => {\n        history.push(\"/posts/new\")\n    }\n    const navigateToEditPost = (key, data) => {\n        history.push(`/posts/edit/${key}`, {id: key, data})\n    }\n    const navigateToPostDetail = (key, data) => {\n        history.push(`/posts/${key}`, {id: key, data})\n    }\n    \n    useEffect(() => {\n        console.log(\"PostsScreen reloaded\")\n        fetchAll()\n\n        return () => {\n            console.log(\"Cleanup should be here\")\n        }\n\n    }, [])\n\n    return <>\n        {\n            <Input type=\"button\" onClick={navigateToAddPost} value=\"New Post\" />\n        }\n        {\n            <Input type=\"button\" onClick={fetchAll} value=\"Reload\" />\n        }\n        {\n            postsState?.error ? <h4 style={{ color: \"red\" }}> {postsState.error}</h4> : null\n        }\n        {\n            postsState?.successMessage ? <h4> {postsState.successMessage}</h4> : null\n        }\n\n        {\n            postsState?.posts ?\n                <PostList posts={(postsState.posts).map(item => {\n                    return {\n                        key: item.id,\n                        heading: item.title,\n                        detail: item.body\n                    }\n                })}\n                    actions={{ delete: deletePost, edit: navigateToEditPost , view: navigateToPostDetail }} />\n                :\n                <h3>No Posts yet</h3>\n        }\n    </>\n}\n\nexport const PostsScreen = withPosts(_PostsScreen);","import React, { useState } from 'react'\nimport { Input, Label } from 'reactstrap'\n\n/**\n * @typedef {{ key: number| null, \n *              heading: string | null | undefined, \n *              detail:  string | null | undefined }} PostDisplayData\n * @typedef {Object} PostForm \n * @property  {PostDisplayData} data\n * @property {(number, PostDisplayData) => Promise } doneHandler\n * @property {string} success\n * @property {error} error\n * @param {PostForm} props \n * \n */\nexport const TEST = (props) => {\n    console.log(\"test\")\n    console.log(props)\n    return <ul>\n        { Object.entries(props).map( ([key, val]) => <li key={key}> Key: {key}, value: {val} </li> ) }\n    </ul>\n}\nexport const PostForm = ({data, doneHandler, success, error}) => {\n\n    const [headingState, setHeadingState] = useState(data?.heading);\n    const [detailState, setDetailState] = useState(data?.detail);\n\n    // const [successState, setSuccessState] = useState();\n    \n    // const [errorState, setErrorState] = useState();\n    \n    const savePressed = () => {\n        doneHandler(data.key, {heading: headingState, detail: detailState})\n        // .then( ()=>{\n        //     setSuccessState(\"Success\");\n        //     setErrorState(null);\n        // })\n        // .catch( (/** @type Error */ e)=>{\n        //     setErrorState(e.message);\n        //     setSuccessState(null);\n        // }) \n    }\n    return <div>\n        \n        { success && <>  <Label style={{color:\"green\"}}>{success}</Label> <br/> </>} \n        { error && <>  <Label style={{color:\"red\"}}>{error}</Label> <br/> </> }\n        <br/>\n        <Label>Post Id</Label>\n        <br/>\n        <Label>{data?.key || \"New Post\"  }</Label>\n        <br/>\n        <Label>Heading</Label>\n        <br/>\n        <Input type=\"text\" value={headingState} onChange={e => setHeadingState(e.target.value)}/>\n        <br/>\n        <Label>Detail</Label>\n        <br/>\n        <Input type=\"textarea\" value={detailState} onChange={e => setDetailState(e.target.value)} />\n        <br/>\n        <Input type=\"button\" value=\"Save\" onClick={ savePressed}/>\n        <br/>\n    </div>\n}","import React, { useContext } from \"react\";\nimport { useHistory, useParams, withRouter } from \"react-router-dom\"\nimport { PostForm } from \"../components/PostForm\";\nimport { PostsContext, withPosts } from \"../contexts/PostsContext\";\nimport { editPost } from \"../services\";\n\nconst _EditPostScreen = ({history, location, postsState,  editPost}) =>{\n    // console.log(props);\n    \n    // const {state: postsState,  editPost} = useContext(PostsContext);\n\n    const save = (key, post) => {\n        editPost(key, \n        {\n            title: post.heading,\n            body: post.detail\n        }).then(() => {\n            history.goBack();\n        }).catch(e => {\n            console.log(e)\n        })\n    }\n    \n    return <div>\n        <PostForm data={location.state.data} doneHandler={save} success={postsState.success} error={postsState.error}  />\n    </div>\n}\n\n\n\nexport const EditPostScreen = withPosts(  withRouter(_EditPostScreen) )\n\n","import React, { useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { Input, Label } from 'reactstrap'\n\n/**\n * @typedef {{ key: number| null, \n *              heading: string | null | undefined, \n *              detail:  string | null | undefined }} PostDisplayData\n * @typedef {Object} PostForm \n * @property  {PostDisplayData} data\n * @property {(number, PostDisplayData) => Promise } doneHandler\n * @property {string} success\n * @property {error} error\n * @param {PostForm} props \n * \n */\nexport const PostDetail = ({data, doneHandler}) => {\n\n    return <div>\n        \n        <br/>\n        <Label>Post Id</Label>\n        <br/>\n        <Label>{data?.key   }</Label>\n        <br/>\n        <Label>Heading</Label>\n        <br/>\n        <Label>{data.heading}</Label> \n        <br/>\n        <Label>Detail</Label>\n        <br/>\n        <p>{data.detail}</p>\n        <br/>\n        <Input type=\"button\" value=\"Back\" onClick={ doneHandler}/>\n        <br/>\n    </div>\n}\n","import React, { useContext } from \"react\";\nimport { useHistory, useParams, withRouter } from \"react-router-dom\"\nimport { PostDetail } from \"../components/PostDetail\";\nimport { PostsContext, withPosts } from \"../contexts/PostsContext\";\n\nconst _PostDetailScreen = ({ history, location, postsState, editPost }) => {\n    // console.log(props);\n\n\n\n    // const { state: postsState, editPost } = useContext(PostsContext);\n\n    const done = (key, post) => {\n        history.goBack();\n    }\n\n    return <div>\n        <PostDetail data={location.state.data} doneHandler={done} />\n    </div>\n}\n\n\n\nexport const PostDetailScreen = withPosts( withRouter(_PostDetailScreen))\n\n","import React, { useContext } from \"react\";\nimport { useHistory, useParams, withRouter } from \"react-router-dom\"\nimport { PostForm } from \"../components/PostForm\";\nimport { PostsContext, withPosts } from \"../contexts/PostsContext\";\n\nconst _AddPostScreen = ({history, postsState, addPost}) =>{\n\n    // const {state,  addPost} = useContext(PostsContext);\n\n    const save = (key, post) => {\n        addPost({\n            title: post.heading,\n            body: post.detail\n        }).then(() => {\n            history.goBack();\n        }).catch(e => {\n            console.log(e)\n        })\n    }\n    return <div>\n        <PostForm data={{}} doneHandler={save} success={postsState.success} error={postsState.error}  />\n    </div>\n}\n\n\n\nexport const AddPostScreen = withPosts(  withRouter(_AddPostScreen) )\n\n","import React, { useContext } from 'react';\n\nimport './App.css';\nimport { CardHeader } from 'reactstrap'\nimport { BrowserRouter, Redirect, Route, Switch } from 'react-router-dom';\nimport { AuthContext, AuthProvider, withAuth } from './contexts/AuthContext'\nimport { LoginScreen } from './screens/LoginScreen';\nimport { PostsScreen } from './screens/PostsScreen';\nimport { PostsProvider, withPosts } from './contexts/PostsContext';\nimport { EditPostScreen } from './screens/EditPostScreen';\nimport { PostDetailScreen } from './screens/PostDetailScreen';\nimport { AddPostScreen } from './screens/AddPostScreen';\n\nconst Home = () => <p>Home</p>\nconst About = () => <p>About</p>\n\n\nconst App = withAuth( function ({authState, }) {\n  // const { state: authState } = useContext(AuthContext);\n  console.log(\"APP\");\n  console.log(arguments);\n  return (\n    <div className=\"App\">\n      <CardHeader>Hello </CardHeader>\n      {authState?.creds ?\n        <BrowserRouter>\n          <Redirect path=\"/\" to=\"/posts\" />\n          <Route exact path=\"/posts\" component={PostsScreen} />\n          <Route path=\"/posts/new\"  component={AddPostScreen} />\n          <Route path=\"/posts/edit/:id\"  component={EditPostScreen} />\n          <Route exact path=\"/posts/:id\"  component={PostDetailScreen} />\n\n          <Route path=\"/about\" component={About} />\n          <Route path=\"/home\" component={Home} />\n\n\n\n        </BrowserRouter> :\n        <BrowserRouter >\n          <Redirect path=\"/\" to=\"/login\" />\n          <Route path=\"/login\" component={LoginScreen} />\n        </BrowserRouter>\n      }\n    </div>\n  );\n})\n\nexport default  () => {\n  return (\n\n    // <AuthProvider>\n    //   <PostsProvider>\n        <App />\n    //   </PostsProvider>\n    // </AuthProvider>\n  );\n};\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from \"redux\";\nimport { authReducer } from \"./authReducer\";\nimport { postsReducer } from \"./postsReducer\";\n\nexport const combinedReducers = combineReducers({\n    posts: postsReducer, auth: authReducer\n})","import { call, fork, put, select, takeEvery, take, takeLatest } from 'redux-saga/effects'\n\n// worker Saga: will be fired on USER_FETCH_REQUESTED actions\n/**\n * \n * @param {number} ms \n */\nconst myDelay = (ms) => new Promise(res => setTimeout(res, ms)); \n\nconst getAuthState = () => select(state => state.auth)\n\nfunction* sagaDemoLogin(action) {\n    console.log(action)\n    const { getLoginErrorAction, setUsername, setPassword, login } = action.payload\n    yield put(getLoginErrorAction(\"I will use the error message to display some interesting idea.\"))\n    yield call(myDelay, 5000);\n    let delayMs = 300\n    \n    const message = \"I am Trying to display this message using saga delays. This demo is to show how generator functions are incorporated into saga\"\n    yield* displayMessageWithPutAction(message, delayMs, getLoginErrorAction);\n    \n    const message2 = \"I will enter my user name first\"\n    yield* displayMessageWithPutAction(message2, delayMs, getLoginErrorAction);\n    \n    yield call(myDelay, 10000);\n    \n    delayMs = 500\n        \n    let username = \"UserName\"\n    yield* displayMessageWithCall(username, delayMs, setUsername);\n    \n    let password = \"User\"\n    yield* displayMessageWithCall(password, delayMs, setPassword);\n    \n    delayMs = 300\n    let ps = getAuthState().password\n    let msg = \"Ops. Wrong password, will try again. ps: his password was :::\" + password\n    yield* displayMessageWithPutAction(msg, delayMs, getLoginErrorAction);\n    \n    delayMs = 500\n        \n    username = \"UserName\"\n    yield* displayMessageWithCall(username, delayMs, setUsername);\n    \n    password = \"UserName\"\n    yield* displayMessageWithCall(password, delayMs, setPassword);\n\n    while (! getAuthState().creds ){\n        const message3 = \"I will try to login\"\n        yield* displayMessageWithCall(message3, delayMs, getLoginErrorAction);\n        yield call(login, username, password);\n    }\n\n\n\n\n}\nfunction* displayMessageWithCall(message, delayMs, func) {\n    for (let i = 0; i < message.length; i++) {\n        yield call(myDelay, delayMs);\n        yield call(func, message.substr(0, i + 1));\n    }\n}\n\nfunction* displayMessageWithPutAction(message, delayMs, getLoginErrorAction) {\n    for (let i = 0; i < message.length; i++) {\n        yield call(myDelay, delayMs);\n        yield put(getLoginErrorAction(message.substr(0, i + 1)));\n    }\n}\n\nfunction* demoAction2(action) {\n    // try {\n    //    yield put({type: \"USER_FETCH_SUCCEEDED\", user: user});\n    // } catch (e) {\n    //    yield put({type: \"USER_FETCH_FAILED\", message: e.message});\n    // }\n}\n\n/*\n  Alternatively you may use takeLatest.\n\n  Does not allow concurrent fetches of user. If \"USER_FETCH_REQUESTED\" gets\n  dispatched while a fetch is already pending, that pending fetch is cancelled\n  and only the latest one will be run.\n*/\nfunction* watchDemoAction1() {\n    yield takeLatest(\"SAGA_DEMO_LOGIN\", sagaDemoLogin);\n}\nfunction* watchDemoAction2() {\n    yield takeLatest(\"SAGA_DEMO_2\", demoAction2);\n}\n\nfunction* rootSaga() {\n    yield takeLatest(\"SAGA_DEMO_LOGIN\", sagaDemoLogin);\n\n    // yield [\n    //     fork(watchDemoAction1), // saga1 can also yield [ fork(actionOne), fork(actionTwo) ]\n    //     fork(watchDemoAction2),\n    // ];\n}\nexport default rootSaga;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { applyMiddleware, createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport { combinedReducers } from './reducers';\nimport thunkMiddleware from 'redux-thunk'\nimport loggerMiddleware from 'redux-logger'\nimport createSagaMiddleware from 'redux-saga';\nimport mySaga from './sagas'\nimport { sagaTheLogin } from './actions/authActions';\n\nconst sagaMiddleware = createSagaMiddleware()\nconst store = createStore(combinedReducers,\n  applyMiddleware(\n    // thunkMiddleware, // lets us dispatch() functions\n    sagaMiddleware,\n    loggerMiddleware // neat middleware that logs actions\n\n    )\n)\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\nsagaMiddleware.run(mySaga);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}